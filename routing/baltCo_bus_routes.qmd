---
title: "BaltCo Bus Routes Analysis"
editor: visual
---

```{r, echo = F, include = F}
library(tidyverse)
library(lubridate)
library(sf)
library(rgeocodio)
library(janitor)
library(hms)
library(kableExtra)

options(dplyr.summarise.inform = FALSE)

county_bus_routes_parsed <-
  read_csv("data/setup/baltimore_county_routes.csv") %>%
  clean_names()

# functions 
clean_am_routes <- 
  function(x, am_or_pm) {
    x %>% 
      filter(
      # We'll filter here for just AM routes 
      str_detect(route, am_or_pm),
      # We want to exclude the first or last "stops" of a route if it doesn't include any students boarding or alighting. We don't want those counted in the trip's length overall because no students are riding 
      !(stop == 1 & students == 0),
      !(stop == max(stop) & students == 0),
      # we don't care about railroad crossings and don't want to treat them as stops 
      location != "**RAILROAD CROSSING - PROCEED WITH CAUTION**",
      !str_detect(route, "NON-TRANSPORTED ZONE")
                  ) %>% 
      # join to our summary file so we can calculate how long students who get on the bus at each stop spend on the bus
      left_join(county_bus_route_summaries, by = c("route", "source_file")) %>% 
      # calculate the time spent on the bus for students who board at each stop
      mutate(net_time = as.numeric(difftime(max_time, time, units = "mins"))) %>% 
      # calculate average time spent riding the bus weighted by students at each stop 
      group_by(route, source_file) %>% 
      summarise(
        # we want to weighht travel time by the number of students at each stop to reflect the average time a student spends on the bus
        # we also want to exclude stops where no students are on the bus
        avg_time = weighted.mean(net_time[students > 0],
                                 w = students[students > 0]),
        # just so we have it, we'll also take the unweighted travel time for each stop, though this is less valuable 
        # unweighted_avg_time = mean(net_time[students > 0], na.rm = T),
        avg_boarding_time = weighted.mean(time[students > 0],
                                          w = students[students > 0]),
        avg_alighting_time = weighted.mean(max_time[students > 0],
                                           w = students[students > 0]),
        students = sum(students[students > 0], na.rm = T),
      ) %>% 
      # As we'll find out later on in this code, some routes are missing times, while including number of students who rely on them. 
      # The reason for this, I presume, is to avoid doxxing the students who get picked up near their homes to be bused to out of zone magnet schools.
      filter(avg_time > 1) %>% 
      ungroup()
  }
```

## How many bus routes are there in Baltimore County Public Schools?

The code below serves both to help us check how the parser did and to provide a very, very high level summary of the data.

We create our 'county_bus_route_summaries' object by grouping by route and source file and summarizing the number of stops and the time range of the route. We also count 'net students' to cehck that each route drops off as many students as it picks up. This check ensures our parser didn't miss any data iun the PDFs.

```{r}
# check for data completeness or places where the parser messed up and look at all routes 
county_bus_route_summaries <- 
  county_bus_routes_parsed %>% 
  # make our columns the right format 
  mutate(students = as.numeric(students),
         stop = as.numeric(stop),
         time = hms(as.numeric(time))) %>% 
  group_by(route, source_file) %>% 
  summarise(n = n(),
            # Since stops are numbered by row, to find the number of stops on a route, we can just take the max stop number
            max_stop = max(stop, na.rm = T),
            net_students = sum(students, na.rm = T),
            min_time = min(time, na.rm = T),
            max_time = max(time, na.rm = T)
  ) %>% 
  ungroup() %>% 
  mutate(max_time = as_hms(max_time),
         min_time = as_hms(min_time)) 

# small sample 
# county_bus_route_summaries %>% 
#   sample_n(25) %>% 
#   kbl() %>%
#   kable_material()
#   


```

## AM and PM Summaries

This codeblock calculates the average time spent riding the bus weighted by students at each stop for AM and PM routes. It also calculates the average boarding and alighting times for each route.

It is not the *perfect* analogue to our Baltimore City routing data because we don't know how long students travel to bus stops. But it gives us a point of comparison for Baltimore City students' commutes (many of which I'm pretty confident involve more walking than most Baltimore County routes) and time spent on the bus compared to Baltimore City students.

Based on the school system's data, the average morning commute for a Baltimore City bus rider is about 20 minutes on the bus, about double the length of the average Baltimore County bus rider's morning commute, based on the r5r model.

The number of students transported also stands out here. Since methods are getting to school are so decentralized in Baltimore City compared to the county, it takes more individual routes to move fewer students. The city has about 6x more AM routes than the county.

The County's superior efficiency also shows up in boarding and alighting times. Students start their bus trips at about 6:50 a.m. on average, about 20 minutes later than Baltimore City students, while arriving earlier on average. My assumption here is that this cushion between arrival at school and the first period bell is built in to allow for some late buses. If we built the same consideration into our routing model for city students, the gap in average departure time would widen even more.

```{r, warning = F, message = F}
# AM Routes 

# all 
all_am_routes <- 
  county_bus_routes_parsed %>% 
  clean_am_routes(am_or_pm = " AM") %>% 
  mutate(
    avg_boarding_time = as_hms(avg_boarding_time),
    avg_alighting_time = as_hms(avg_alighting_time)
    ) %>% 
  # the distinct here eliminates duplicate routes that are in multiple source files
  distinct(route, .keep_all = T)


# summaries 
am_routes_summary <- 
  county_bus_routes_parsed %>% 
  clean_am_routes(am_or_pm = " AM") %>% 
  distinct(route, .keep_all = T) %>%
  summarise(
    n = n(),
    avg_time = weighted.mean(avg_time, w = students),
    # unweighted_avg_time = mean(unweighted_avg_time, na.rm = T),
    avg_boarding_time = as_hms(weighted.mean(avg_boarding_time, w = students, na.rm = T)),
    avg_alighting_time = as_hms(weighted.mean(avg_alighting_time, w = students, na.rm = T)),
    students = sum(students),
    students_per_route = students / n
  ) 

am_routes_summary %>% 
  kbl() %>% 
  kable_styling(full_width = FALSE) %>% 
  kable_material_dark() %>% 
  scroll_box(width = "150%")

# am_routes_summary %>% 
#   write_csv(here::here("data/output/baltco_am_routes_summary.csv"))
```

Like in Baltimore City, the commute home in Baltimore County seems to be longer than the commute to school. The trip home, which also seems to transport about 2000 fewer students (not sure whether this is because of typos or real), takes about 30 minutes on average, compared to the 20 minutes it takes to get to school.

Access to yellow buses also means the afternoon commute doesn't come with the same level of uncertainty in the county as in the city, where buses are not only less frequent, but also less reliable. In practical terms, this means students in the county have a much better shot at getting home at a reasonable time.

(Believe it or not, I still actually have to model this to pull exact afternoon arrival times in Baltimore city)

```{r, warning = F, message = F}
# PM Routes 
# all 
all_pm_routes <- 
  county_bus_routes_parsed %>% 
  clean_am_routes(am_or_pm = " PM") %>% 
  mutate(
    avg_boarding_time = as_hms(avg_boarding_time),
    avg_alighting_time = as_hms(avg_alighting_time)
    ) %>% 
  # the distinct here eliminates duplicate routes that are in multiple source files
  distinct(route, .keep_all = T)

# small sample 
# all_pm_routes %>% 
#   sample_n(25) %>% 
#   kbl() %>% 
#   kable_material()

#summary
pm_routes_summary <- 
  county_bus_routes_parsed %>% 
  clean_am_routes(am_or_pm = " PM") %>% 
  distinct(route, .keep_all = T) %>% 
  summarise(
    n = n(),
    avg_time = weighted.mean(avg_time, w = students),
    # unweighted_avg_time = mean(unweighted_avg_time, na.rm = T),
    avg_boarding_time = as_hms(weighted.mean(avg_boarding_time, w = students, na.rm = T)),
    avg_alighting_time = as_hms(weighted.mean(avg_alighting_time, w = students, na.rm = T)),
    students = sum(students),
    students_per_route = students / n
  ) 

pm_routes_summary %>% 
  kbl() %>% 
  kable_styling(full_width = FALSE) %>% 
  kable_material() %>% 
  scroll_box(width = "150%")

# pm_routes_summary %>%
#   write_csv(here::here("data/output/baltco_pm_routes_summary.csv"))

```

### Checking our work

Let's do some extra work to try to understand why our code about is correct, check for any errors, and see if we can learn any more about the other kinds of routes in the data.

We'll begin by checking out all of our non-AM or PM routes, excluding Non-Transported Zone routes, whnich we'll get to in just a minute.

There are 23 of these kinds of routes, including things like alt routes, noon routes (maybe for sports or students with special needs?), and a few buses that only come on certain days. Of that 23, only 4 routes carry students, 90 total. An insignificant number in terms of moving our countywide average, but still worth noting.

```{r, warning = F, message = F}

# All non AM or PM routes 
non_am_pm_routes <- 
  county_bus_routes_parsed %>% 
  filter(
  !str_detect(route, " AM| PM"),
  !str_detect(route, "NON-TRANSPORTED ZONE"),
  !(stop == 1 & students == 0),
  !(stop == max(stop) & students == 0),
  location != "**RAILROAD CROSSING - PROCEED WITH CAUTION**") %>% 
  group_by(route, source_file) %>% 
  summarise(n = n(), 
    students = sum(students[students > 0], na.rm = T)
            ) %>% 
  ungroup() 

# weird routes 
non_am_pm_routes_at_least_one_student <- 
  county_bus_routes_parsed %>% 
  filter(
  !str_detect(route, " AM| PM"),
  !str_detect(route, "NON-TRANSPORTED ZONE"),
  !(stop == 1 & students == 0),
  !(stop == max(stop) & students == 0),
  location != "**RAILROAD CROSSING - PROCEED WITH CAUTION**") %>% 
  left_join(county_bus_route_summaries, by = c("route", "source_file")) %>% 
  mutate(net_time = as.numeric(difftime(max_time, time, units = "mins"))) %>% 
  # calculate average time spent riding the bus weighted by students at each stop 
  group_by(route, source_file) %>% 
  summarise(
    avg_time = weighted.mean(net_time[students > 0],
                             w = students[students > 0]),
    # unweighted_avg_time = mean(net_time[students > 0], na.rm = T),
    avg_boarding_time = weighted.mean(time[students > 0],
                                      w = students[students > 0]),
    avg_alighting_time = weighted.mean(max_time[students > 0],
                                       w = students[students > 0]),
    students = sum(students[students > 0], na.rm = T)
  ) %>% 
  # ungroup() %>% 
  filter(students > 0) %>%
  mutate(
    avg_boarding_time = as_hms(mean(avg_boarding_time, na.rm = T)),
    avg_alighting_time = as_hms(mean(avg_alighting_time, na.rm = T))
  ) %>% 
  ungroup()

non_am_pm_routes_at_least_one_student %>% 
  kbl() %>% 
  kable_styling(full_width = FALSE) %>% 
  kable_material() %>% 
  scroll_box(width = "250%")


# avg of all weird routes (minus ones carrying students)
non_am_pm_route_summary <- 
  county_bus_routes_parsed %>% 
  filter(
  !str_detect(route, " AM| PM"),
  !str_detect(route, "NON-TRANSPORTED ZONE"),
  !(stop == 1 & students == 0),
  !(stop == max(stop) & students == 0),
  location != "**RAILROAD CROSSING - PROCEED WITH CAUTION**") %>% 
  left_join(county_bus_route_summaries, by = c("route", "source_file")) %>% 
  mutate(net_time = as.numeric(difftime(max_time, time, units = "mins"))) %>% 
  # calculate average time spent riding the bus weighted by students at each stop 
  group_by(route, source_file) %>% 
  summarise(
    avg_time = weighted.mean(net_time[students > 0],
                             w = students[students > 0]),
    # unweighted_avg_time = mean(net_time[students > 0], na.rm = T),
    avg_boarding_time = weighted.mean(time[students > 0],
                                      w = students[students > 0]),
    avg_alighting_time = weighted.mean(max_time[students > 0],
                                       w = students[students > 0]),
    students = sum(students[students > 0], na.rm = T)
  ) %>% 
  ungroup() %>% 
  filter(avg_time > 1) %>% 
  summarise(
    n = n(),
    avg_time = weighted.mean(avg_time, w = students),
    # unweighted_avg_time = mean(unweighted_avg_time, na.rm = T),
    avg_boarding_time = as_hms(mean(avg_boarding_time, na.rm = T)),
    avg_alighting_time = as_hms(mean(avg_alighting_time, na.rm = T)),
    total_students = sum(students)
  ) 

non_am_pm_route_summary %>% 
  kbl() %>% 
  kable_styling(full_width = FALSE) %>% 
  kable_material() %>% 
  scroll_box(width = "150%")

  
```

### Deep-diving on out of zone students

The 54 'Non-Transported Zone' routes are probably the trickiest part of the data to evaluate. Presumably, these routes serve out of zone magnet school students. This represents about \~8,000 students or somewhere around 20% of the county's bus riders.

However, the way these routes are represented in the PDFs makes them tricky to evaluate. The majority do not include departure times, arrival times, or stops. This is likely to protect the privacy of students who are picked up near their homes to be bused to out of zone magnet schools. However, this means that we can only factor about half of these routes (25 have at least a minute gap between the first and last stop) into our average commute time calculations. It also means we don't know anything about how many stops are made along these routes or indeed if stops are made along these routes at all. There are several that apparently carry hundreds of students for literally one minute, which obviously doesn't make sense.

In our system-wide summaries above, we've eliminated routes that we either cannot determine the length of, or have an impossibly low travel time. In effect, this moves our morning and afternoon averages up by about 2 minutes.

Ultimately, I think there's probably an argument to be made for just eliminating all of these routes from consideration (I'm not even convinced that many of these are real bus routes), but I'd prefer to keep as many as we can given they represent a not-insignificant portion of the county's bus riders.

```{r, warning = F, message = F}
# All non-transported zone routes 

# AM 
ooz_am_routes <- 
  county_bus_routes_parsed %>% 
  filter(
    str_detect(route, " AM"),
    str_detect(route, "NON-TRANSPORTED ZONE"),
    !(stop == 1 & students == 0),
    !(stop == max(stop) & students == 0),
    location != "**RAILROAD CROSSING - PROCEED WITH CAUTION**"
  ) %>% 
  group_by(route, source_file) %>%
  summarise(n = n(), 
            students = max(students),
            min_time = as_hms(min(time)), 
            max_time = as_hms(max(time))
            ) %>% 
  mutate(net_time = as.numeric(difftime(max_time, min_time, units = "mins"))) %>% 
  # distinct here eliminates duplicate routes that are in multiple source files
  distinct(route, .keep_all = T) %>% 
  ungroup()
# 
# ooz_am_routes %>% 
#   sample_n(10) %>% 
#   kbl() %>%
#   kable_material()


```

```{r, warning = F, message = F}
# PM 
ooz_pm_routes <- 
  county_bus_routes_parsed %>% 
  filter(
    str_detect(route, " PM"),
    str_detect(route, "NON-TRANSPORTED ZONE"),
    !(stop == 1 & students == 0),
    !(stop == max(stop) & students == 0),
    location != "**RAILROAD CROSSING - PROCEED WITH CAUTION**"
  ) %>% 
  group_by(route, source_file) %>%
  summarise(n = n(), 
            students = max(students),
            min_time = as_hms(min(time)), 
            max_time = as_hms(max(time))
            ) %>% 
  mutate(net_time = as.numeric(difftime(max_time, min_time, units = "mins"))) %>% 
  # distinct here eliminates duplicate routes that are in multiple source files
  distinct(route, .keep_all = T) %>% 
  ungroup()


# ooz_pm_routes %>% 
#   sample_n(10) %>% 
#   kbl() %>% 
#   kable_material()
#             

```

We only have 8 OOZ morning routes that we can evaluate and I remain deeply unconvinced that these are real bus routes. The average time spent on these routes is about 39 minutes, which seems plausible, but the average number of students on these routes is about 500, which seems impossible. However, these routes, to say nothing of the 20 others that we can't say anything about, represent over 3500 students, about 10% of the county's bus riders.

```{r, warning = F, message = F}
# NTZ routes summary
ooz_am_route_summary <- 
  county_bus_routes_parsed %>% 
  filter(
  str_detect(route, " AM"),
  !(stop == 1 & students == 0),
  !(stop == max(stop) & students == 0),
  location != "**RAILROAD CROSSING - PROCEED WITH CAUTION**",
  str_detect(route, "NON-TRANSPORTED ZONE")) %>% 
  left_join(county_bus_route_summaries, by = c("route", "source_file")) %>% 
  mutate(net_time = as.numeric(difftime(max_time, time, units = "mins"))) %>% 
  # calculate average time spent riding the bus weighted by students at each stop 
  group_by(route, source_file) %>% 
  summarise(
    avg_time = weighted.mean(net_time[students > 0],
                             w = students[students > 0]),
    unweighted_avg_time = mean(net_time[students > 0], na.rm = T),
    avg_boarding_time = weighted.mean(time[students > 0],
                                      w = students[students > 0]),
    avg_alighting_time = weighted.mean(max_time[students > 0],
                                       w = students[students > 0]),
    students = sum(students[students > 0], na.rm = T)
  ) %>% 
  ungroup() %>%
  # distinct here eliminates duplicate routes that are in multiple source files
  distinct(route, .keep_all = T) %>% 
  filter(avg_time > 1) %>%
  summarise(
    n = n(),
    avg_time = weighted.mean(avg_time, w = students),
    unweighted_avg_time = mean(unweighted_avg_time, na.rm = T),
    avg_boarding_time = as_hms(mean(avg_boarding_time, na.rm = T)),
    avg_alighting_time = as_hms(mean(avg_alighting_time, na.rm = T)),
    students = sum(students),
    students_per_route = students / n
  ) 

ooz_am_route_summary %>% 
  kbl() %>% 
  kable_styling(full_width = FALSE) %>% 
  kable_material() %>% 
  scroll_box(width = "150%")
            
```

Afternoon OOZ routes are fewer and shorter than morning routes. There are only 5 of these routes with an average travel time over 1 minute. The average commute time for students on these routes is 7 minutes, which, again, seems impossible. These routes, again, to say nothing of the ones we cannot evaluate, represent nearly 1500 students.

```{r, warning = F, message = F}
# NTZ routes summary
ooz_pm_route_summary <- 
  county_bus_routes_parsed %>% 
  filter(
  str_detect(route, " PM"),
  !(stop == 1 & students == 0),
  !(stop == max(stop) & students == 0),
  location != "**RAILROAD CROSSING - PROCEED WITH CAUTION**",
  str_detect(route, "NON-TRANSPORTED ZONE")) %>% 
  left_join(county_bus_route_summaries, by = c("route", "source_file")) %>% 
  mutate(net_time = as.numeric(difftime(max_time, time, units = "mins"))) %>% 
  # calculate average time spent riding the bus weighted by students at each stop 
  group_by(route, source_file) %>% 
  summarise(
    avg_time = weighted.mean(net_time[students > 0],
                             w = students[students > 0]),
    unweighted_avg_time = mean(net_time[students > 0], na.rm = T),
    avg_boarding_time = weighted.mean(time[students > 0],
                                      w = students[students > 0]),
    avg_alighting_time = weighted.mean(max_time[students > 0],
                                       w = students[students > 0]),
    students = sum(students[students > 0], na.rm = T)
  ) %>% 
  ungroup() %>% 
  # distinct here eliminates duplicate routes that are in multiple source files
  distinct(route, .keep_all = T) %>% 
  filter(avg_time > 1) %>% 
  summarise(
    n = n(),
    avg_time = weighted.mean(avg_time, w = students),
    unweighted_avg_time = mean(unweighted_avg_time, na.rm = T),
    avg_boarding_time = as_hms(mean(avg_boarding_time, na.rm = T)),
    avg_alighting_time = as_hms(mean(avg_alighting_time, na.rm = T)),
    students = sum(students)
  ) 

ooz_pm_route_summary %>% 
  kbl() %>% 
  kable_styling(full_width = FALSE) %>% 
  kable_material() %>% 
  scroll_box(width = "150%")
```
